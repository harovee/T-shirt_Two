
import { Client } from '@stomp/stompjs';
import { Modal } from "ant-design-vue";  // Import Modal t·ª´ ant-design-vue
import { createVNode, ref } from "vue";
import { ExclamationCircleOutlined } from "@ant-design/icons-vue";
import {
  warningNotiSort,
  successNotiSort,
  errorNotiSort,
  notificationType,
  openNotification,
} from "@/utils/notification.config";
import { DOMAIN_BACKEND } from '../constants/url';

interface Address {
  province: string
  district: string
  ward: string
  detail: string
}

interface CustomerInfo {
  name: string
  phone: string
  address: Address | null
  email: string
}

interface Shipping {
  method: string
  cost: number
  estimatedDelivery: string
}

export interface Item {
  id: string
  name: string
  quantity: number
  price: number
  total: number
  image: string
  size: string
  color: string
  sku: string
}

interface Voucher {
  id: string
  code: string
  name: string
  discount: number
  type: "fixed" | "percent"
}

export interface InvoiceData {
  id: string
  items: Item[]
  subtotal: number
  tax: number
  total: number
  customerInfo: CustomerInfo
  paymentMethod: string
  shipping?: Shipping | null
  vouchers?: Voucher[]
  guestMoney: number | null
  transferMoney?: number | null
}

export const invoices = ref<InvoiceData[]>([])

export const currentInvoice = ref({
  id: "#####",
  items: [
    {
      id: "SPCT001",
      name: "√Åo m·ªôt",
      quantity: 2,
      price: 850000,
      total: 1700000,
      image: "https://example.com/images/casio-mtp-v002l.jpg",
      size: "M",
      color: "ƒêen",
      sku: "CASIO-MTP-V002L-1BUDF"
    },
    {
      id: "SPCT002",
      name: "√Åo hai",
      quantity: 1,
      price: 2300000,
      total: 2300000,
      image: "https://example.com/images/seiko5-snk809.jpg",
      size: "S",
      color: "ƒêen",
      sku: "SEIKO-SNK809K2"
    },
    // {
    //   id: "SPCT003",
    //   name: "√Åo ba",
    //   quantity: 1,
    //   price: 1500000,
    //   total: 1500000,
    //   image: "https://example.com/images/seiko5-snk809.jpg",
    //   size: "XL",
    //   color: "ƒêen",
    //   sku: "SEIKO-SNK809K2"
    // }
  ],
  subtotal: 0,
  tax: 0,
  total: 0,
  customerInfo: {
    name: "Kh√°ch l·∫ª",
    phone: "#####",
    email: "#####",
    address: null
  },
  paymentMethod: "Chuy·ªÉn kho·∫£n",
  // shipping: {
  //   method: "GHN",
  //   cost: 30000,
  //   estimatedDelivery: "2025-04-24"
  // },
  shipping: null,
  vouchers: [],
  guestMoney: 0,
  transferMoney: 0
} as InvoiceData);



const stompClient = new Client({
  brokerURL: DOMAIN_BACKEND + "/ws",
  reconnectDelay: 5000,
  forceBinaryWSFrames: true,
  appendMissingNULLonIncoming: true,
  onConnect: () => {
    console.warn('üü¢ K·∫øt n·ªëi th√†nh c√¥ng!');
  },
  debug: (msg) => console.log('Debug: ', msg),
});
stompClient.activate();


///////////////
// Exist Invoice
export const isExistInvoice = (invoiceId: string) => {
  return invoices.value.some(invoice => invoice.id === invoiceId);
};

export const getInvoiceById = (invoiceId: string) => {
  return invoices.value.find(invoice => invoice.id === invoiceId) || null;  
}

export const addInvoice = (id: string): boolean => {
  if (!isExistInvoice(id) && id !== ""){
    let newInvoice = createEmptyInvoice(id);
    invoices.value.push(newInvoice);
    currentInvoice.value = newInvoice; 
    console.log("Th√™m h√≥a ƒë∆°n m·ªõi:", newInvoice);
    return true;
  } else {
    console.warn(`H√≥a ƒë∆°n v·ªõi ID ${id} ƒë√£ t·ªìn t·∫°i.`);
    return false; 
  }
};

export const createEmptyInvoice = (id: string): InvoiceData => {
  return {
    id,
    items: [],
    subtotal: 0,
    tax: 0,
    total: 0,
    customerInfo: {
      name: "Kh√°ch l·∫ª",
      phone: "#####",
      email: "#####",
      address: null
    },
    paymentMethod: "Ti·ªÅn m·∫∑t",
    shipping: null,
    vouchers: [],
    guestMoney: 0,
    transferMoney: 0
  };
};

const getAmount = (items: Item[]) => {
  return items.reduce((sum, item) => sum + item.price * item.quantity, 0) 
}

// G·ª≠i c·∫≠p nh·∫≠t m√†n app
export const sendCartInfo = (cartInfo: InvoiceData) => {
  cartInfo.subtotal = getAmount(cartInfo.items);
  console.log("G·ª≠i th√¥ng tin gi·ªè h√†ng ƒë·∫øn app:", cartInfo);
  stompClient.publish({ destination:"/app/cart-info", body: JSON.stringify(cartInfo) });
};

///////////////
let subscriptions: { [key: string]: any } = {}; // L∆∞u tr·ªØ c√°c subscription cho m·ªói invoiceId

// K·∫øt n·ªëi WebSocket v√† subscribe cho nhi·ªÅu h√≥a ƒë∆°n
export const listenToInvoice = (invoiceId: string, onConnectConfirmed: () => void, onDisconnect: () => void) => {
  if ( !stompClient.connected ) {
    stompClient.onConnect = () => {
      console.log("K·∫øt n·ªëi th√†nh c√¥ng!");
      subscribeInvoice(invoiceId, onConnectConfirmed, onDisconnect);
    };
  }else if ( !subscriptions[invoiceId] ) {
      subscribeInvoice(invoiceId, onConnectConfirmed, onDisconnect);
  }
};


export const subscribeInvoice = (invoiceId, onConnectConfirmed: () => void, onDisconnect: () => void) => {

     // Subscribe cho m·ªói invoiceId khi k·∫øt n·ªëi th√†nh c√¥ng
     let subcr = stompClient.subscribe(`/topic/pos`, (message) => {
      let response = JSON.parse(message.body);
      console.log(`C·∫≠p nh·∫≠t t·ª´ h√≥a ƒë∆°n ${invoiceId}:`, response);
    });

    // L∆∞u subscription v√†o object subscriptions ƒë·ªÉ qu·∫£n l√Ω
    subscriptions[invoiceId] = subcr;

}

// G·ª≠i th√¥ng b√°o k·∫øt n·ªëi th√†nh c√¥ng
export const sendConnectConfirm = (item) => {
  stompClient.publish({ destination:"/app/connect-confirm", body: JSON.stringify(item) });
};

// G·ª≠i c·∫≠p nh·∫≠t gi·ªè h√†ng mb
export const sendCartUpdate = (invoiceId: string) => {
  stompClient.publish({ destination:"/app/update-cart-mb", body: invoiceId });
};

// G·ª≠i x√°c nh·∫≠n thanh to√°n
export const sendPaymentConfirm = (invoiceId: string, onPayment: () => boolean, onMbDisConnect: () => void) => {
  const subscription = subscriptions[invoiceId];
      if (subscription) {
        stompClient.publish({ destination:"/app/confirm-payment", body: invoiceId });
        subscribeConfirmPayment(invoiceId, onPayment, onMbDisConnect);
      }
};


// G·ª≠i th√¥ng tin giao d·ªãch
export const sendTransactionInfo = (invoiceId: string, transactionStatus: boolean) => {
  const subscription = subscriptions[invoiceId];
      if (subscription) {
        stompClient.publish({ 
          destination:"/app/transaction-info",
          body: JSON.stringify({
            invoiceId: invoiceId,
            transactionStatus: transactionStatus})
           });
      }
}

type UpdateQuantityInput = {
   invoiceId: string;
   productId: string;
   quantity: number;
   orderDetailId: string;
}

// L·∫Øng nghe c·∫≠p nh·∫≠t gi·ªè h√†ng - quantity
export const subscribeUpdateProductQuantity = (invoiceId: string) => {
  var subcr = stompClient.subscribe(`/topic/update-cart/${invoiceId}`, (message) => {
    let response = JSON.parse(message.body);
    console.log(`C·∫≠p nh·∫≠t t·ª´ h√≥a ƒë∆°n ${invoiceId}:`, response);
  });
};

// L·∫Øng nghe c·∫≠p nh·∫≠t gio h√†ng - xoa
export const subscribeDeleteProductInCart= (invoiceId: string, orderDetailId: string) => {
  var subcr = stompClient.subscribe(`/topic/delete-pd-cart/${invoiceId}`, (message) => {
    let response = JSON.parse(message.body);
    console.log(`X√≥a pd trong ${orderDetailId}:`, response);
    subcr.unsubscribe();
  });
};

// L·∫Øng nghe ph·∫£n h·ªìi x√°c nh·∫≠n thanh to√°n
export const subscribeConfirmPayment= (invoiceId: string, onPayment: () => boolean, onMbDisConnect: () => void) => {
  var subcr = stompClient.subscribe(`/topic/confirm-payment/${invoiceId}`, (message) => {
    let response = JSON.parse(message.body) as Boolean;
    if (response) {
      const transactionStatus  = onPayment();
      onMbDisConnect();
      sendTransactionInfo(invoiceId, transactionStatus);

      subscriptions[invoiceId].unsubscribe();
      subcr.unsubscribe();

    }
  });
  
};

// L·∫Øng nghe ng·∫Øt k·∫øt n·ªëi t·ª≠ MB
export const subscribeDisconnectClient= (invoiceId: string, onMbDisConnect: () => void) => {
  var subcr = stompClient.subscribe(`/topic/disconnect-client/${invoiceId}`, (message) => {
    disconnectSocketByInvoiceId(invoiceId, onMbDisConnect);
    successNotiSort(`ƒê√£ ng·∫Øt k·∫øt n·ªëi cho h√≥a ƒë∆°n ${invoiceId}`);
    subcr.unsubscribe();
  });
  
};

// Ng·∫Øt k·∫øt n·ªëi WebSocket
export const disconnectSocket = () => {
  if (stompClient && stompClient.connected) {
    stompClient.onDisconnect = () => {
      console.log("ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket (Vue).");
      Object.keys(subscriptions).forEach(invoiceId => {
        subscriptions[invoiceId].unsubscribe();
      });
      subscriptions = {};
    };
  }
};


// Ng·∫Øt k·∫øt n·ªëi WebSocket cho m·ªôt invoiceId c·ª• th·ªÉ
  export const disconnectSocketByInvoiceId = (invoiceId: string | null, onMbDisConnect: () => void ) => {
    if (invoiceId && stompClient && stompClient.connected) {
      const subscription = subscriptions[invoiceId];
      if (subscription) {
        onMbDisConnect();
        stompClient.publish({ destination:"/app/disconnect-mobile", body: invoiceId });
        console.log(`ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket cho h√≥a ƒë∆°n ${invoiceId}`);
      } else {
        console.log(`Kh√¥ng t√¨m th·∫•y k·∫øt n·ªëi WebSocket cho h√≥a ƒë∆°n ${invoiceId}`);
      }
    }
  };