
import { Client } from '@stomp/stompjs';
import { Modal } from "ant-design-vue";  // Import Modal t·ª´ ant-design-vue
import { createVNode } from "vue";
import { ExclamationCircleOutlined } from "@ant-design/icons-vue";
import {
  warningNotiSort,
  successNotiSort,
  errorNotiSort,
  notificationType,
  openNotification,
} from "@/utils/notification.config";
import { DOMAIN_BACKEND } from '../constants/url';

const stompClient = new Client({
  brokerURL: DOMAIN_BACKEND + "/ws",
  reconnectDelay: 5000,
  forceBinaryWSFrames: true,
  appendMissingNULLonIncoming: true,
  onConnect: () => {
    console.warn('üü¢ K·∫øt n·ªëi th√†nh c√¥ng!');
  },
  debug: (msg) => console.log('Debug: ', msg),
});
stompClient.activate();

let subscriptions: { [key: string]: any } = {}; // L∆∞u tr·ªØ c√°c subscription cho m·ªói invoiceId

// K·∫øt n·ªëi WebSocket v√† subscribe cho nhi·ªÅu h√≥a ƒë∆°n
export const listenToInvoice = (invoiceId: string, onConnectConfirmed: () => void, onDisconnect: () => void) => {
  if ( !stompClient.connected ) {
    stompClient.onConnect = () => {
      console.log("K·∫øt n·ªëi th√†nh c√¥ng!");
      subscribeInvoice(invoiceId, onConnectConfirmed, onDisconnect);
    };
  }else if ( !subscriptions[invoiceId] ) {
      subscribeInvoice(invoiceId, onConnectConfirmed, onDisconnect);
  }
};


export const subscribeInvoice = (invoiceId, onConnectConfirmed: () => void, onDisconnect: () => void) => {

     // Subscribe cho m·ªói invoiceId khi k·∫øt n·ªëi th√†nh c√¥ng
     let subcr = stompClient.subscribe(`/topic/connect-confirm/${invoiceId}`, (message) => {
      let response = JSON.parse(message.body);

      console.log(`C·∫≠p nh·∫≠t t·ª´ h√≥a ƒë∆°n ${invoiceId}:`, response);

      Modal.confirm({
        title: "X√°c nh·∫≠n k·∫øt n·ªëi",
        content: `C√≥ y√™u c·∫ßu k·∫øt n·ªëi t·ª´ h√≥a ƒë∆°n ${invoiceId}. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?`,
        icon: createVNode(ExclamationCircleOutlined),
        centered: true,
        onOk() {
          console.log(`ƒê√£ ƒë·ªìng √Ω k·∫øt n·ªëi v·ªõi h√≥a ƒë∆°n ${invoiceId}`);
          onConnectConfirmed();
          response.connectConfirmed = true;
          response.connectConfirmedTime = Math.floor(Date.now() / 1000);
          sendConnectConfirm(response);


          subscribeDisconnectClient(invoiceId, onDisconnect);
          // C√≥ th·ªÉ g·ªçi h√†m ƒë·ªÉ th·ª±c hi·ªán k·∫øt n·ªëi th·ª±c t·∫ø ho·∫∑c c·∫≠p nh·∫≠t d·ªØ li·ªáu g√¨ ƒë√≥
        },
        onCancel() {
          console.log(`ƒê√£ t·ª´ ch·ªëi k·∫øt n·ªëi v·ªõi h√≥a ƒë∆°n ${invoiceId}`);
          response.connectConfirmed = false;
          response.connectConfirmedTime = Math.floor(Date.now() / 1000);
          sendConnectConfirm(response);
        },
      });
    });

    // L∆∞u subscription v√†o object subscriptions ƒë·ªÉ qu·∫£n l√Ω
    subscriptions[invoiceId] = subcr;

}

// G·ª≠i th√¥ng b√°o k·∫øt n·ªëi th√†nh c√¥ng
export const sendConnectConfirm = (item) => {
  stompClient.publish({ destination:"/app/connect-confirm", body: JSON.stringify(item) });
};

// G·ª≠i c·∫≠p nh·∫≠t gi·ªè h√†ng mb
export const sendCartUpdate = (invoiceId: string) => {
  stompClient.publish({ destination:"/app/update-cart-mb", body: invoiceId });
};

// G·ª≠i x√°c nh·∫≠n thanh to√°n
export const sendPaymentConfirm = (invoiceId: string, onPayment: () => boolean, onMbDisConnect: () => void) => {
  const subscription = subscriptions[invoiceId];
      if (subscription) {
        stompClient.publish({ destination:"/app/confirm-payment", body: invoiceId });
        subscribeConfirmPayment(invoiceId, onPayment, onMbDisConnect);
      }
};


// G·ª≠i th√¥ng tin giao d·ªãch
export const sendTransactionInfo = (invoiceId: string, transactionStatus: boolean) => {
  const subscription = subscriptions[invoiceId];
      if (subscription) {
        stompClient.publish({ 
          destination:"/app/transaction-info",
          body: JSON.stringify({
            invoiceId: invoiceId,
            transactionStatus: transactionStatus})
           });
      }
}

type UpdateQuantityInput = {
   invoiceId: string;
   productId: string;
   quantity: number;
   orderDetailId: string;
}

// L·∫Øng nghe c·∫≠p nh·∫≠t gi·ªè h√†ng - quantity
export const subscribeUpdateProductQuantity = (invoiceId: string) => {
  var subcr = stompClient.subscribe(`/topic/update-cart/${invoiceId}`, (message) => {
    let response = JSON.parse(message.body);
    console.log(`C·∫≠p nh·∫≠t t·ª´ h√≥a ƒë∆°n ${invoiceId}:`, response);
  });
};

// L·∫Øng nghe c·∫≠p nh·∫≠t gio h√†ng - xoa
export const subscribeDeleteProductInCart= (invoiceId: string, orderDetailId: string) => {
  var subcr = stompClient.subscribe(`/topic/delete-pd-cart/${invoiceId}`, (message) => {
    let response = JSON.parse(message.body);
    console.log(`X√≥a pd trong ${orderDetailId}:`, response);
    subcr.unsubscribe();
  });
};

// L·∫Øng nghe ph·∫£n h·ªìi x√°c nh·∫≠n thanh to√°n
export const subscribeConfirmPayment= (invoiceId: string, onPayment: () => boolean, onMbDisConnect: () => void) => {
  var subcr = stompClient.subscribe(`/topic/confirm-payment/${invoiceId}`, (message) => {
    let response = JSON.parse(message.body) as Boolean;
    if (response) {
      const transactionStatus  = onPayment();
      onMbDisConnect();
      sendTransactionInfo(invoiceId, transactionStatus);

      subscriptions[invoiceId].unsubscribe();
      subcr.unsubscribe();

    }
  });
  
};

// L·∫Øng nghe ng·∫Øt k·∫øt n·ªëi t·ª≠ MB
export const subscribeDisconnectClient= (invoiceId: string, onMbDisConnect: () => void) => {
  var subcr = stompClient.subscribe(`/topic/disconnect-client/${invoiceId}`, (message) => {
    disconnectSocketByInvoiceId(invoiceId, onMbDisConnect);
    successNotiSort(`ƒê√£ ng·∫Øt k·∫øt n·ªëi cho h√≥a ƒë∆°n ${invoiceId}`);
    subcr.unsubscribe();
  });
  
};

// Ng·∫Øt k·∫øt n·ªëi WebSocket
export const disconnectSocket = () => {
  if (stompClient && stompClient.connected) {
    stompClient.onDisconnect = () => {
      console.log("ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket (Vue).");
      Object.keys(subscriptions).forEach(invoiceId => {
        subscriptions[invoiceId].unsubscribe();
      });
      subscriptions = {};
    };
  }
};


// Ng·∫Øt k·∫øt n·ªëi WebSocket cho m·ªôt invoiceId c·ª• th·ªÉ
  export const disconnectSocketByInvoiceId = (invoiceId: string | null, onMbDisConnect: () => void ) => {
    if (invoiceId && stompClient && stompClient.connected) {
      const subscription = subscriptions[invoiceId];
      if (subscription) {
        onMbDisConnect();
        stompClient.publish({ destination:"/app/disconnect-mobile", body: invoiceId });
        console.log(`ƒê√£ ng·∫Øt k·∫øt n·ªëi WebSocket cho h√≥a ƒë∆°n ${invoiceId}`);
      } else {
        console.log(`Kh√¥ng t√¨m th·∫•y k·∫øt n·ªëi WebSocket cho h√≥a ƒë∆°n ${invoiceId}`);
      }
    }
  };